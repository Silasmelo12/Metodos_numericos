l = 1
    t = 0.5
    delta_x = 0.1
    delta_t = 0.2
    num_pontos = int(l / delta_x) + 1
    num_tempo = int(t / delta_t) + 1
    difusividade_termica = 0.2
    x = np.arange(0, l + delta_x, delta_x)  # explicar a igor
    t = np.arange(0, 1 + delta_t, delta_t)
    u_num = np.zeros((num_tempo, num_pontos))
    a = np.zeros(num_pontos)
    b = np.zeros(num_pontos)
    d = np.zeros(num_pontos)
    col = num_pontos - 2
    lin = num_pontos - 2
    C   = np.zeros(col)

    v = (delta_t / delta_x) * difusividade_termica

    u_num[0, :] = 100 * np.sin(np.pi * x / l)
    u_num[0, num_pontos-1] = 0
    u_num[:, 0]  = 0
    u_num[:, num_pontos-1] = 0

    A = np.zeros((lin, col))
    # existe uma função "zeros" na biblioteca numpy que retorna uma matriz de zeros. na qual é necessario informar o numero de linhas e colunas
    # neste caso, linha = num_tempo e coluna = num_pontos
    # porém, para acessar a matriz A, é necessário escrever A[linha,coluna]

    a[:] = v / 2
    b[:] = -v / 2
    d[:] = 1

    C = u_num[0,1:-1]

    C[0] = u_num[0, 1] - b[0] * u_num[1, 0]
    C[col-1] = u_num[0, num_pontos-2] - a[0] * u_num[1, num_pontos-1]

    '''
     Construção da matriz tridiagonal para Euler implicito.
     onde a primeira linha com os dois primeiros elementos, são definidos antes, pois
     não são da mesma lei de formação
    '''
    A[0, 0] = d[0]  # os indices da matriz não comecam com 1, e sim, com 0, neste caso, A[0,0] chama o primeiro elemento
    A[0, 1] = a[0]

    # solução numérica. o indice i percorre as linhas
    for i in range(1, lin-1):
        A[i, i] = d[0]
        A[i, i - 1] = b[0]
        A[i, i + 1] = a[0]
    A[lin-1, col-1] = d[0]
    A[lin-1, col-2] = b[0]

    '''
    # algoritmo de Thomas
    for i in range(1, lin - 1):
        
        A[i, i] = A[i, i] - (A[i, i - 1] * A[i - 1, i]) / A[i - 1, i - 1]
        A[i, i + 1] = A[i, i + 1] * A[i - 1, i - 1]
        A[i, i - 1] = 0
        C[i] = C[i] - (C[i - 1] * A[i, i - 1]) / A[i - 1, i - 1]

    A[lin - 1, col - 1] = A[lin, col] - (A[lin, col - 1] * A[lin - 1, col]) / A[lin - 1, col - 1]
    A[lin, col + 1] = A[lin, col + 1] * A[lin - 1, col - 1]
    A[lin, col - 1] = 0
    C[col] = C[col] - (C[col - 1] * A[col, col - 1]) / A[col - 1, col - 1]
    '''

    # algoritmo de Thomas
    for i in range(1,lin):
        A[i,i]   = A[i,i] - (A[i,i-1]*A[i-1,i])/A[i-1,i-1]
        A[i,i-1] = 0

    for i in range(1,lin-1):
        A[i,i+1] = A[i,i+1] * A[i-1,i-1]

    for i in range(1,lin):
        C[i]     = C[i]-(C[i-1]*A[i,i-1])/A[i-1,i-1]

    u_t = np.zeros(9)

    u_t[8] = C[lin-1]/A[lin-1,col-1]
    #print("u_t = ",u_t)
    #print("C[lin-1] = ",C[lin-1])
    #print("A[i-1,i-1] = ",A[lin-1,col-1] )

    '''
        j começa com a quantidade de linha e vai decrescendo até a primeira linha (indice 0).
    '''

    for j in range(lin-2,-1,-1):
        #u_num[1,j+1] = (C[j]-A[j,j+1]-u_num[1,j+2])/A[j,j]
        u_t[j] = (C[j]-A[j,j+1]-u_t[j+1])/A[j,j]
    print(u_t.round(2))


    #print(A.round(2))
    return u_num
